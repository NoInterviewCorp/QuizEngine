// <auto-generated />
using Learners.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace aspback.Migrations
{
    [DbContext(typeof(LearnersContext))]
    [Migration("20181102120255_data")]
    partial class data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Learners.Models.Option", b =>
                {
                    b.Property<string>("OptionId");

                    b.Property<string>("Content");

                    b.Property<bool>("IsCorrect");

                    b.Property<string>("QuestionId");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Learners.Models.Question", b =>
                {
                    b.Property<string>("QuestionId");

                    b.Property<int>("BloomLevel");

                    b.Property<bool>("HasPublished");

                    b.Property<string>("ProblemStatement")
                        .IsRequired();

                    b.Property<string>("ResourceLink");

                    b.Property<string>("TopicId");

                    b.HasKey("QuestionId");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Learners.Models.QuizData", b =>
                {
                    b.Property<string>("QuizId");

                    b.Property<string>("AttemptedOn");

                    b.Property<int>("Blooms");

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("TechName");

                    b.Property<int>("TopicCompleted");

                    b.Property<string>("UserName");

                    b.HasKey("QuizId");

                    b.HasIndex("UserName");

                    b.ToTable("QuizDatas");
                });

            modelBuilder.Entity("Learners.Models.Technology", b =>
                {
                    b.Property<string>("TechnologyId");

                    b.Property<string>("Technologyname")
                        .IsRequired();

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("Learners.Models.TemporaryData", b =>
                {
                    b.Property<string>("UserName");

                    b.Property<string>("AttemptedOn");

                    b.Property<int>("Blooms");

                    b.Property<bool>("IsCompleted");

                    b.Property<string>("QuizId");

                    b.Property<string>("TechName");

                    b.Property<int>("TempScore");

                    b.Property<int>("TopicCompleted");

                    b.HasKey("UserName");

                    b.ToTable("Temporaries");
                });

            modelBuilder.Entity("Learners.Models.Threshold", b =>
                {
                    b.Property<int>("ThresholdId");

                    b.Property<int>("BloomLevel");

                    b.Property<int>("MaxThreshold");

                    b.Property<int>("MinThreshold");

                    b.HasKey("ThresholdId");

                    b.ToTable("Thresholds");
                });

            modelBuilder.Entity("Learners.Models.Topic", b =>
                {
                    b.Property<string>("TopicId");

                    b.Property<string>("TechnologyId");

                    b.Property<string>("TopicName");

                    b.HasKey("TopicId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Learners.Models.UserData", b =>
                {
                    b.Property<string>("UserName");

                    b.HasKey("UserName");

                    b.ToTable("UserDatas");
                });

            modelBuilder.Entity("Learners.Models.Option", b =>
                {
                    b.HasOne("Learners.Models.Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Learners.Models.Question", b =>
                {
                    b.HasOne("Learners.Models.Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId");
                });

            modelBuilder.Entity("Learners.Models.QuizData", b =>
                {
                    b.HasOne("Learners.Models.UserData")
                        .WithMany("QuizDatas")
                        .HasForeignKey("UserName");
                });

            modelBuilder.Entity("Learners.Models.Topic", b =>
                {
                    b.HasOne("Learners.Models.Technology")
                        .WithMany("Topics")
                        .HasForeignKey("TechnologyId");
                });
#pragma warning restore 612, 618
        }
    }
}
